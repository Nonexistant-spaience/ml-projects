# -*- coding: utf-8 -*-
"""Threat Predictor_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fFOrSiZet-VgJZ_t3YsbVWSHUWP5qY1h
"""

import streamlit as st
import pickle
import shap
import matplotlib.pyplot as plt
import numpy as np
import lightgbm as lgb
import pandas as pd


# Load the model
with open('model.pkl', 'rb') as f:
    model = pickle.load(f)


# Load or create SHAP Explainer
explainer = shap.TreeExplainer(model)


# Streamlit app
st.title('Threat Predictor 1.0')
st.write('Enter your input in the following fields')


age = st.number_input('Age:')
#ed_lvl = st.number_input('Education lvl:')


st.write("His education level")
ed_option = st.selectbox(
    "Choose an option:",
    ["High School", "Bachelor", "Masters", "PhD"]
)
if ed_option == 'High School':
    ed_lvl = 0
elif ed_option == 'Masters' :
    ed_lvl = 2
elif ed_option == 'Bachelor' :
    ed_lvl = 1
else :
    ed_lvl = 3


#occu_type = st.number_input('Occupation type:')
st.write("His occupation:")
option = st.selectbox(
    "Choose an option:",
    ["Office Worker", "Business Owner", "Student", "Unemployment"]
)
if option == 'Office Worker':
    occu_type =  -0.020
elif option == 'Business Owner' :
    occu_type = 0.020
elif option == 'Student' :
    occu_type = 0.004
else :
    occu_type = 0.001




#rel_stat = st.number_input('Relationship Stats:')
st.write("His relationship status:")
option = st.selectbox(
    "Choose an option:",
    ["In a Relationship", "Single", "Married", "Divorced"]
)
if option == 'In a Relationship':
    rel_stat = 0.028
elif option == 'Single' :
    rel_stat = -0.003
elif option == 'Married' :
    rel_stat = -0.012
else :
    rel_stat = -0.012




#city = st.number_input('City Type:')
st.write("His living city type:")
option = st.selectbox(
    "Choose an option:",
    ["Urban", "Rural", "Suburban"]
)
if option == 'Urban':
    city = -0.002
elif option == 'Rural' :
    city = 0.004
else:
    city = -0.002


empathy = st.number_input('Empathy score (1 to 100):')




#anger = st.number_input('Anger control level:')
st.write("His anger level:")
option = st.selectbox(
    "Choose an option:",
    ["Low", "Moderate", "High"]
)
if option == 'Low':
    anger = 1
elif option == 'Moderate' :
    anger = 2
else:
    anger = 3


boundary = st.number_input('Respect for boundary (1 to 100):')


#conf_res = st.number_input('Conflict resolution:')
st.write("His conflict resolution status:")
option = st.selectbox(
    "Choose an option:",
    ["Passive", "Aggressive", "Rational", "Avoidant"]
)
if option == 'Passive':
    conf_res = 0.021
elif option == 'Aggressive' :
    conf_res = -0.017
elif option == 'Rational' :
    conf_res = -0.019
else :
    conf_res = 0.016


online_cmnt = st.number_input('Rate his comment sentiment (-100 to +100). [Negative indicates negativity]:')




#past = st.number_input('Past complains:')
st.write("His past complaints of misbehavior:")
option = st.selectbox(
    "Choose an option:",
    ["Workplace", "Social", "Multiple"]
)
if option == 'Workplace':
    past = 0.041
elif option == 'Social' :
    past = 0.097
else:
    past = -3.02


peer_rating = st.number_input('Friend and peer safety rating (0 to 5):')


#soc_good = st.number_input('Participation in social good:')
st.write("His participation in social good:")
option = st.selectbox(
    "Choose an option:",
    ["Yes", "No"]
)
if option == 'Yes':
    soc_good = 1
elif option == 'No' :
    soc_good = 0


#alcohol = st.number_input('Alcohol consumption frequency:')
st.write("His alcohol consumption status:")
option = st.selectbox(
    "Choose an option:",
    ["Never", "Occassionally", "Frequently"]
)
if option == 'Never':
    alcohol = 1
elif option == 'Occassionally' :
    alcohol = 2
else:
    alcohol = 3


#hist_aggressive = st.number_input('History of aggressive behavior:')
st.write("His history of aggressive behavior:")
option = st.selectbox(
    "Choose an option:",
    ["Yes", "No"]
)
if option == 'Yes':
    hist_aggressive = 1
else :
    hist_aggressive = 0


# Convert input to float (handling errors)
input_data = [[age, ed_lvl, occu_type, rel_stat, city, empathy, anger, boundary, conf_res, online_cmnt, past, peer_rating, soc_good, alcohol, hist_aggressive]]


if st.button('Predict'):
    try:
        prediction = model.predict(input_data)
        st.success(f"Prediction: {prediction[0]}")
    except Exception as e:
        st.error(f"Error: {e}")


if st.button('XAI Interpretation'):
    try:
        # Convert input to DataFrame for SHAP
        input_df = pd.DataFrame(input_data, columns=['age', 'ed_lvl', 'occu_type', 'rel_stat', 'city', 'empathy', 'anger',
                                                     'boundary', 'conf_res', 'online_cmnt', 'past', 'peer_rating', 'soc_good',
                                                     'alcohol', 'hist_aggressive'])


        # Get SHAP values
        shap_values = explainer(input_df)


        # Feature Importance Plot (Summary Plot)
        st.subheader("Feature Importance (Summary Plot)")
        plt.figure(figsize=(10, 5))
        shap.summary_plot(shap_values, input_df)
        st.pyplot(plt)


        # Bar plot
        st.subheader("Feature Impact (Bar Chart)")
        fig, ax = plt.subplots()
        shap.summary_plot(shap_values.values, input_df, plot_type="bar")
        st.pyplot(fig)


    except Exception as e:
        st.error(f"Error in SHAP interpretation: {e}")

